//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QFramework.Example
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using UnityEngine.SceneManagement;
    using UnityEngine.UI;
    
    
    public class UIHomePanelData : QFramework.UIPanelData
    {
    }
    
    public partial class UIHomePanel : QFramework.UIPanel
    {
        public List<GameObject> boomObjs;
        public string[] prefabNames;

        protected override void ProcessMsg(int eventId, QFramework.QMsg msg)
        {
            throw new System.NotImplementedException ();
        }
        
        protected override void OnInit(QFramework.IUIData uiData)
        {
            mData = uiData as UIHomePanelData ?? new UIHomePanelData();
            // please add init code here
            UpdateMoneyText(0);
            TipsPanel.gameObject.SetActive(false);
            startBtn.onClick.AddListener(StartClick);
            prefabNames = new string[] { "fractionText", "boomUI" };
            boomObjs = new List<GameObject>();
            switchBtn.onClick.AddListener(SwitchClick);
            switchPanel.gameObject.SetActive(false);

            GameManager.Instance.isPause = true;
            InitPanelData();
        }
        
        protected override void OnOpen(QFramework.IUIData uiData)
        {
        }
        
        protected override void OnShow()
        {
        }
        
        protected override void OnHide()
        {
        }
        
        protected override void OnClose()
        {
        }

        /// <summary>
        /// 初始化panel数据
        /// </summary>
        public void InitPanelData()
        {
            BtnAddClick(endPanel.transform);
            BtnAddClick(setPanel.transform);
            endPanel.gameObject.SetActive(false);
            setPanel.gameObject.SetActive(false);
        }

        public void BtnAddClick(Transform trans)
        {
            //endpanel中的resetButton未加bind 两个resetButton重复
            Button restBtn = trans.Find("restBtn").GetComponent<Button>();
            Button quitBtn = trans.Find("quitBtn").GetComponent<Button>();
            restBtn.onClick.AddListener(RestClick);
            quitBtn.onClick.AddListener(QuitClick);
        }

        public void UpdateTimeText(float time)
        {
            timeText.text = "时间：" + ((int)time).ToString();
        }

        public void UpdateMoneyText(int fraction)
        {
            moneyText.text = "当前分数：" + fraction.ToString();
        }

        public void UpdateLevelText(int level)
        {

            levelText.text = "关卡：" + (level + 1).ToString();
        }

        public void UpdateTargetText(int targetFraction)
        {
            targetMoney.text = "当前目标：" + targetFraction.ToString();
        }

        /// <summary>
        /// 生成分数提示文本
        /// </summary>
        public void CreatTipsText(int fraction)
        {
            Vector3 creatPoint = Camera.main.WorldToScreenPoint(GameManager.Instance.player.transform.position);
            GameObject tempObj = GameManager.Instance.poolData.fractionText.Allocate(creatPoint);
            Text tempText = tempObj.transform.GetComponent<Text>();
            tempText.text = fraction.ToString();
            tempObj.transform.SetParent(transform);
            StartCoroutine(TipsMove(tempObj.transform));

        }

        IEnumerator TipsMove(Transform targetTrans)
        {
            float scaleVaule = 1f;
            targetTrans.localScale = new Vector3(scaleVaule, scaleVaule);
            Vector3 startPoint = targetTrans.position;
            yield return null;
            for (int i = 0; i < 9; i++)
            {
                scaleVaule += 0.1f;
                targetTrans.localScale = new Vector3(scaleVaule, scaleVaule);
                targetTrans.position = Vector3.Lerp(startPoint, fractionPoint.position, scaleVaule);
                yield return null;
            }
            yield return new WaitForSeconds(0.2f);
            GameManager.Instance.poolData.Recycle(targetTrans.gameObject);
            yield break;
        }

        public void StartClick()
        {
            GameManager.Instance.isPause = false;
            StartPanel.gameObject.SetActive(false);
            TipsPanel.gameObject.SetActive(true);
        }

        /// <summary>
        /// 开启与关闭切换面版
        /// </summary>
        public void OpenCloseSwitchPanel()
        {
            bool isOpen = switchPanel.gameObject.activeSelf;
            if (isOpen)
            {
                switchPanel.gameObject.SetActive(false);
            }
            else
            {
                switchPanel.gameObject.SetActive(true);
            }

        }

        public void SwitchClick()
        {
            GameManager.Instance.SwitchFunc();
            OpenCloseSwitchPanel();
        }

        /// <summary>
        /// 打开死亡面版
        /// </summary>
        public void OpenDeathPanle()
        {
            endPanel.gameObject.SetActive(true);
        }

        /// <summary>
        /// 打开设置面版
        /// </summary>
        public void OpenSetPanle()
        {
            bool isOpen = setPanel.gameObject.activeSelf;
            if (isOpen)
            {
                setPanel.gameObject.SetActive(false);
                Time.timeScale = 1;
            }
            else
            {
                Time.timeScale = 0;
                setPanel.gameObject.SetActive(true);
            }

        }

        /// <summary>
        /// 重新开始 重新加载场景
        /// </summary>
        public void RestClick()
        {
            UIKit.CloseAllPanel();
            SceneManager.LoadScene(0);
        }

        /// <summary>
        /// 退出按钮的响应事件
        /// </summary>
        public void QuitClick()
        {
            Application.Quit();
        }

        /// <summary>
        /// 炸弹添加UI
        /// </summary>
        public void BoomAddCount()
        {
            GameObject tempObj = GameManager.Instance.poolData.boomUi.Allocate(boomGird.position, boomGird);
            Debug.Log("boomAdd");
            tempObj.transform.localScale *= 3;
            boomObjs.Add(tempObj);
        }

        /// <summary>
        /// 使用炸弹
        /// </summary>
        public bool UseBoom()
        {
            if (boomObjs.Count > 0)
            {
                GameObject boomUI = boomObjs[(boomObjs.Count - 1)];
                boomObjs.RemoveAt((boomObjs.Count - 1));
                GameManager.Instance.poolData.Recycle(boomUI);
                return true;
            }
            return false;
        }
    }
}
